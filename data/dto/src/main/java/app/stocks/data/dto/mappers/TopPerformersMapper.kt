package app.stocks.data.dto.mappers

import app.stocks.data.dto.localDto.MostActivelyTradedEntity
import app.stocks.data.dto.localDto.TopGainersEntity
import app.stocks.data.dto.localDto.TopLosersEntity
import app.stocks.data.dto.localDto.TopPerformersEntity
import app.stocks.data.dto.remoteDto.*
import app.stocks.data.dto.remoteDto.topGainers.MostActivelyTraded
import app.stocks.data.dto.remoteDto.topGainers.TopGainer
import app.stocks.data.dto.remoteDto.topGainers.TopLoser
import app.stocks.data.dto.remoteDto.topGainers.TopPerformersResponse

// TopPerformersResponse to TopPerformersEntity
fun TopPerformersResponse.toEntity(): TopPerformersEntity {
    return TopPerformersEntity(
        id = 0,  // Assuming ID is autogenerated
        lastUpdated = this.lastUpdated,
        metadata = this.metadata
    )
}

// MostActivelyTraded to MostActivelyTradedEntity
fun MostActivelyTraded?.toEntity(topPerformersId: Int): MostActivelyTradedEntity {
    return MostActivelyTradedEntity(
        topPerformersId = topPerformersId,
        changeAmount = this?.changeAmount,
        changePercentage = this?.changePercentage,
        price = this?.price,
        ticker = this?.ticker,
        volume = this?.volume
    )
}

// TopGainer to TopGainersEntity
fun TopGainer?.toEntity(topPerformersId: Int): TopGainersEntity {
    return TopGainersEntity(
        topPerformersId = topPerformersId,
        changeAmount = this?.changeAmount,
        changePercentage = this?.changePercentage,
        price = this?.price,
        ticker = this?.ticker,
        volume = this?.volume
    )
}

// TopLoser to TopLosersEntity
fun TopLoser?.toEntity(topPerformersId: Int): TopLosersEntity {
    return TopLosersEntity(
        topPerformersId = topPerformersId,
        changeAmount = this?.changeAmount,
        changePercentage = this?.changePercentage,
        price = this?.price,
        ticker = this?.ticker,
        volume = this?.volume
    )
}


fun List<MostActivelyTraded?>?.toMostActivelyTradedEntityList(topPerformersId: Int): List<MostActivelyTradedEntity> {
    return this?.mapNotNull { it?.toEntity(topPerformersId) } ?: emptyList()
}

fun List<TopGainer?>?.toTopGainersEntityList(topPerformersId: Int): List<TopGainersEntity> {
    return this?.mapNotNull { it?.toEntity(topPerformersId) } ?: emptyList()
}

fun List<TopLoser?>?.toTopLosersEntityList(topPerformersId: Int): List<TopLosersEntity> {
    return this?.mapNotNull { it?.toEntity(topPerformersId) } ?: emptyList()
}

